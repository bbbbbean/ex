package Ch32;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

class Person{
	private String name;
	private int age;
	// 생성자(디폴트, 모든 인자)
	Person() {};
	
	public Person(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	
	// toString
	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + "]";
	}
	
	// getter and setter
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}
}

public class C01StreamMain {
	public static void main(String[] args) {
		// 컬렉션에 자주 적용
		List<Integer> list = Arrays.asList(1,2,3,4,5);
		System.out.println(list);
		
		// filter
		// 반환 자료형 : 스트림 -> 계속해서 스트림 함수를 이어쓸 수 있음
		// 요소 하나하나를 item으로 받음
		// return에는 조건식
		// 반환형을 결정짓지 않으면 계속해서 스트림을 이어나감
		List<Integer> list2 = 
		list.stream().filter((item)->{return item%2==0;})
					 .collect(Collectors.toList());	// 반환형 결정
		System.out.println("짝수들 : "+list2);
		
		// 필터링한 결과로 또다른 연산처리
		// map : 형태 재구성
		List<Integer> list3 = 
		list.stream().filter((item)->{return item%2==0;})
					 .map((item)->{return item*item;})
					 .collect(Collectors.toList());
		System.out.println("Map 적용 : "+list3);
		
		// person class
		// 정렬
		List<Person> list4 =  Arrays.asList(
							new Person("홍길동",55),
							new Person("청길동",20),
							new Person("백길동",80),
							new Person("흑길동",5)
						);
		List<Integer> list5 = 
//		list4.stream().map((person)->{return person.getAge();})
//					  .collect(Collectors.toList());
//		list4.stream().map(person -> person.getAge())
//					  .collect(Collectors.toList());
		// 단일 메서드 사용 시 메서드 참조 기호(::)사용 가능
		list4.stream().map(Person::getAge)
					  .sorted((a,b)->{return b-a})
					  .collect(Collectors.toList());
		System.out.println(list5);
		
		
		
		
		
	}
}
