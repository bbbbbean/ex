package Ch02;

// 원시형태의 자료형 : C언어로부터 물려받은 자료형, 기본 자료형, 미리 공간을 형성 후 저장(공간의 크기를 넘어서지 못함)

// 정수
// 1byte : byte / 2byte : short, char(양수값만 지원) / 4byte : int - 기본 / 8byte : long <== 정수값을 담기 위한 용도
// char : 숫자, 문자 == 2진 데이터로 변환 저장, 숫자도 한문자도 담을 수 있음. 단일 문자 == 양수로만 지원 ==> 양수, 문자열을 위한 단위 필요해짐
//		: 단일 문자를 담는 용으로 자주 쓰임

// 실수
// 4byte : float / 8byte : double - 기본
// 실수 : 오차가 생길 수 밖에 없는 수. 연산을 할수록 오차가 발생함 ==> 실수는 올림 처리를 하거나 정수로 변환 후 유지보수해야함

// 단일 문자
// 2byte : char

// 문자열 (얘는 저장 방식이 좀 다르다라고만 인지)
// class 자료형 사용 : string
// class 자료형 : 객체의 크기마다 다르게 동적 할당, 들어오는 데이터의 사이즈에 맞게 공간이 만들어짐

public class C04자료형 {
	public static void main(String[] args) {
		
		//---------------------------
		// 정수 int - 4byte 정수 부호 O
		//---------------------------
		int n1 = 0b10101101;	// 2진수값, 0b
		int n2 = 173;			// 10진정수값, 별도의 표기 없음
		int n3 = 0255;			// 8진수값, 0
		int n4 = 0xad;			// 16진수값, 0x
		System.out.printf("%d %d %d %d\n", n1, n2, n3, n4);
		
		//---------------------------
		// 정수 byte - 1byte 정수 부호 O
		//---------------------------
		byte n5 = (byte)-129;	// 강제 형변환, 1byte에서 담을 수 있는 수 범위 넘어감. 큰 공간의 수를 작은 공간에 넣으려고 하는 행위, 데이터 손실 감안
		System.out.println(n5);
		byte n6 = -30;
		byte n7 = 30;
		byte n8 = 127;
		byte n9 = (byte)129;		// 1byte에서 담을 수 있는 수 범위 넘어감
		System.out.printf("%d\n",n9);
		System.out.println(0b10101101);	// 173
		System.out.println(Integer.toBinaryString(-129));	// 11111111111111111111111101111111
		
		
		
	}
}
