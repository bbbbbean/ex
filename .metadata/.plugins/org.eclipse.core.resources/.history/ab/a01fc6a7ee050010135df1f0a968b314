package Ch33;

import java.lang.reflect.Array;
import java.util.List;

@FunctionalInterface	// 함수형 인터페이스 선언(Compiler에게 전달) - 함수형은 추상메서드를 하나만 허용
interface Func1{
	void say(String message);	// 추상메서드
}

@FunctionalInterface	
interface Func2{
	int sum(Integer ...arg);	// 추상메서드
}


public class C01FunctionalInterfaceMain {
	public static void main(String[] args) {
		
		// 01
		Func1 func1 = (message)->{System.out.println(message+"-!");};
		func1.say("Hello World");
	
		Func1 func1_1 = System.out::println;
		func1_1.say("Hello World");
		
		
		// 02
//		Func2 func2 = (items)->{
//			int sum = 0;
//			for(int el:items) 
//				sum+=el;
//			return sum;
//			}; 	// {}의 모든 items를 더한 값을 리턴(반복문으로 items의 item을 누적해서 리턴)
//		
//		System.out.println(func2.sum(10,20,30,40,556,6,7,8,9));
		
		Func2 func2 = (items)->{
			List<Integer> list = Array.get(items, items.length);
			return 0;
			}; 	// {}의 모든 items를 더한 값을 리턴(reduce)
		
		System.out.println(func2.sum(10,20,30,40,556,6,7,8,9));
		
		
		
	}
}
