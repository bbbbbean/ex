======================================================================================
### 동기(Synchronous) / 비동기(ASynchronous) ###
======================================================================================

### 동기(Synchronous) ###

코드가 위에서 아래로 순차적으로 발생
이전 작업이 끝나야 다음 작업이 실행
실행 흐름이 직관적이지만 처리시간이 오래 걸리는 작업이 있으면 전체 프로그램이 지연 될 수 있음
--------------------------------------------------------------------------------------
약속대로 움직이는 방식 -> 프로토콜에서 정의한 방식대로 움직이는 방식
한페이지 내에서 한가지 요청이 완료될 때 까지 다른 작업 불가 (ex, 회원가입)



### 비동기(ASynchronous) ###

특정 작업이 끝날 때까지 기다리지 않고 다음 코드가 먼저 실행됨
시간이 오래 걸리는 작업(예: 네트워크 요청, 파일 읽기 등)을 수행할 때 유용함
콜백(callback), 프로미스(promise), async/await 등을 이용해 처리
-------------------------------------------------------------
규칙을 필요에 의해 커스텀하게 처리
한페이지 내에서 서로 다른 요청 동시 처리 가능





### 요약 ###

동기(약속)
    - JS : 절차대로 처리(Main Thread 흐름대로)
    - network : 속도 / 데이터 단위 / 혼잡 제어에 대한 약속대로
    - web server : 한페이지당 한번에 하나의 요청과 응답의 흐름

비동기
    - JS : 절차를 지키지 않음(Worker Thread 생성 후 독자적으로 처리 - 실제로 스레드를 나누진 않음)
    - network : 미리 만들어 놓은 약속대로 데이터 전송을 하지 않고 임의로, 지정한대로 전송
    - web server : 한페이지당 여러개의 요청과 응답의 흐름(xhr, promise, fetch, ajax, axios...)

스레드 : 코드를 퍼리하는 실행 흐름

비동기 처리간 우선 순위 : async(함수의 헤더에 부여), await(함수 내 비동기 처리 로직에 부여)
        async function func1(){
            await val(순서)
        }